{"version":3,"sources":["assets/iov-logo.svg","address.ts","Header.tsx","Jumbo.tsx","MnemonicInput.tsx","App.tsx","Start.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","chainIdForAddress","network","makeAddress","_x","_x2","_makeAddress","apply","this","arguments","_callee","mnemonic","wallet","chainId","identity","regenerator_default","a","wrap","_context","prev","next","Ed25519HdWallet","fromMnemonic","toString","createIdentity","HdPaths","iov","sent","abrupt","bnsCodec","identityToAddress","stop","Header","react_default","createElement","Row_default","Col_default","react_router_dom","to","className","alt","src","iovLogo","height","React","Component","Jumbo","Jumbotron_default","Container_default","hidden","props","wordlist","Object","toConsumableArray","EnglishMnemonic","MnemonicInput","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","typeahead","state","words","clear","_updateSelected","_this2","lib","id","multiple","bsSize","ref","onChange","selected","setState","onWordsChanged","onInputChange","input","search","oldWords","newWords","trim","split","text","concat","selectHintOnEnter","options","filterBy","option","normalized","toLowerCase","startsWith","emptyState","mnemonicVerificationErrorMessage","undefined","address","App","objectSpread","count","src_Header","src_Jumbo","onClick","generateNewRandomMnemonic","copyMnemonic","clearMnemonic","src_MnemonicInput","console","log","length","Alert_default","variant","dismissible","role","type","data-dismiss","aria-label","aria-hidden","Button_default","disabled","Heading","prompt","confirmed","join","t3","copy","refs","MnemonicInput1","setWords","Bip39","Random","getBytes","randomWords","encode","Start","ReactDOM","render","react_router","exact","path","component","src_App","src_Start","document","getElementById"],"mappings":"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","file":"static/js/main.7ecee103.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/iov-logo.ee12fc6d.svg\";","import { Address, ChainId } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { EnglishMnemonic } from \"@iov/crypto\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\n\nexport type Network = \"mainnet\" | \"testnet\";\n\nfunction chainIdForAddress(network: \"mainnet\" | \"testnet\"): ChainId {\n  if (network === \"mainnet\") return \"iov-mainnet\" as ChainId;\n  else return \"iov-lovenet\" as ChainId; // any testnet chain ID is fine. We just need it for the address prefix\n}\n\nexport async function makeAddress(mnemonic: EnglishMnemonic, network: Network): Promise<Address> {\n  const wallet = Ed25519HdWallet.fromMnemonic(mnemonic.toString());\n  const chainId = chainIdForAddress(network);\n  const identity = await wallet.createIdentity(chainId, HdPaths.iov(0));\n  return bnsCodec.identityToAddress(identity);\n}\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport iovLogo from \"./assets/iov-logo.svg\";\n\nclass Header extends React.Component<{}, {}> {\n  public render(): JSX.Element {\n    return (\n      <Row>\n        <Col>\n          <Link to=\"/\">\n            <img className=\"mt-3 mb-3\" alt=\"IOV logo\" src={iovLogo} height={56} />\n          </Link>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\n\ninterface JumboProps {\n  readonly network?: \"mainnet\" | \"testnet\";\n}\n\nclass Jumbo extends React.Component<JumboProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Row>\n        <Col>\n          <Jumbotron>\n            <Container>\n              <h2>\n                <span className=\"display-2 d-inline-block mr-2\">Address Generator</span>\n                <small className=\"badge badge-primary align-top\" hidden={!this.props.network}>\n                  {this.props.network}\n                </small>\n              </h2>\n              <p className=\"mb-0\">\n                Here you can generate an IOV address\n                <span hidden={!this.props.network}> for {this.props.network}</span>.\n              </p>\n            </Container>\n          </Jumbotron>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Jumbo;\n","import { EnglishMnemonic } from \"@iov/crypto\";\nimport React from \"react\";\nimport { Typeahead, TypeaheadModel } from \"react-bootstrap-typeahead\";\n\nconst wordlist = [...EnglishMnemonic.wordlist]; // create copy of correct type\n\ninterface MnemonicInputProps {\n  readonly id: string;\n  readonly onWordsChanged?: (words: readonly string[]) => void;\n}\n\ninterface MnemonicInputState {\n  readonly words: readonly string[];\n}\n\ninterface PrivateTypeahead<T extends TypeaheadModel> extends Typeahead<T> {\n  readonly clear: () => void;\n  readonly _updateSelected: (selected: T[]) => void;\n}\n\nclass MnemonicInput extends React.Component<MnemonicInputProps, MnemonicInputState> {\n  private typeahead: PrivateTypeahead<string> | null = null;\n\n  public constructor(props: MnemonicInputProps) {\n    super(props);\n    this.state = {\n      words: [],\n    };\n  }\n\n  public setWords(words: readonly string[]): void {\n    if (!this.typeahead) return;\n\n    this.typeahead.clear();\n    this.typeahead._updateSelected([...words]);\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <Typeahead\n          id={this.props.id}\n          multiple={true}\n          bsSize=\"lg\"\n          ref={ref => (this.typeahead = ref as PrivateTypeahead<string>)}\n          onChange={selected => {\n            this.setState({ words: selected });\n            this.props.onWordsChanged && this.props.onWordsChanged(selected);\n          }}\n          onInputChange={input => {\n            if (!this.typeahead) return;\n\n            // Process input if some whitespace included\n            if (input.search(/\\s+/) !== -1) {\n              const oldWords = this.state.words;\n              const newWords = input.trim().split(/\\s+/);\n\n              this.typeahead.setState({ text: \"\" });\n              this.typeahead._updateSelected([...oldWords, ...newWords]);\n            }\n          }}\n          selectHintOnEnter={true}\n          options={wordlist}\n          filterBy={(option, props) => {\n            const normalized = props.text.trim().toLowerCase();\n            return option.startsWith(normalized);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MnemonicInput;\n","import { Bip39, EnglishMnemonic, Random } from \"@iov/crypto\";\nimport copy from \"clipboard-copy\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport { makeAddress } from \"./address\";\nimport Header from \"./Header\";\nimport Jumbo from \"./Jumbo\";\nimport MnemonicInput from \"./MnemonicInput\";\n\ninterface AppProps {\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\ninterface AppState {\n  readonly words: readonly string[];\n  readonly mnemonicVerificationErrorMessage: string | undefined;\n  readonly address: string | undefined;\n}\n\nfunction wordCountOk(count: number): boolean {\n  return count === 12 || count === 15 || count === 18 || count === 21 || count === 24;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emptyState: AppState = {\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: undefined,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst confirmedState: AppState = {\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: \"tiov12q9ngy4wl8tnl0px65e8f4zpcgspgcn05ncywj\",\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      ...emptyState,\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Header />\n        <Jumbo network={this.props.network} />\n        <Row>\n          <Col>\n            <h3>Enter your mnemonic:</h3>\n            <p>\n              We support English BIP39 mnemonics between 12 and 24 words. The mnemonic represents your private\n              key. When you lose it, you cannot access that account anymore.\n            </p>\n            <div>\n              <div className=\"d-flex justify-content-end\">\n                <button onClick={() => this.generateNewRandomMnemonic()} className=\"btn btn-link btn-sm\">\n                  Generate random\n                </button>\n                <button onClick={() => this.copyMnemonic()} className=\"btn btn-link btn-sm\">\n                  Copy\n                </button>\n                <button onClick={() => this.clearMnemonic()} className=\"btn btn-link btn-sm\">\n                  Clear\n                </button>\n              </div>\n              <MnemonicInput\n                ref=\"MnemonicInput1\"\n                id=\"input1\"\n                onWordsChanged={words => {\n                  console.log(words);\n                  this.setState({\n                    words: words,\n                    address: undefined,\n                    mnemonicVerificationErrorMessage: undefined,\n                  });\n                }}\n              />\n              <div className=\"d-flex justify-content-between mt-2\">\n                <p>\n                  <small>{this.state.words.length} words entered.</small>\n                </p>\n              </div>\n\n              <Alert\n                variant=\"danger\"\n                dismissible={true}\n                role=\"alert\"\n                hidden={!this.state.mnemonicVerificationErrorMessage}\n              >\n                {this.state.mnemonicVerificationErrorMessage}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                  onClick={() => this.setState({ mnemonicVerificationErrorMessage: undefined })}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </Alert>\n            </div>\n            <div className=\"d-flex justify-content-center mb-5\">\n              <Button\n                disabled={!wordCountOk(this.state.words.length)}\n                onClick={() => this.makeAddress()}\n                className=\"btn-lg\"\n              >\n                Show my {this.props.network} address\n              </Button>\n            </div>\n          </Col>\n        </Row>\n        <Row hidden={!this.state.address}>\n          <Col>\n            <Alert variant=\"success\">\n              <Alert.Heading>Your IOV address:</Alert.Heading>\n              <p className=\"leap\">{this.state.address}</p>\n            </Alert>\n            <p>This browser tab contains sensitive information in memory. Please close it now.</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private async makeAddress(): Promise<void> {\n    const answer = prompt(\"Did you store the mnemonic in a secure location? If yes, please type-in 'yes'.\");\n    if ((answer || \"\").trim().toLowerCase() !== \"yes\") {\n      return;\n    }\n\n    try {\n      const confirmed = new EnglishMnemonic(this.state.words.join(\" \"));\n\n      this.setState({\n        address: await makeAddress(confirmed, this.props.network),\n      });\n    } catch (error) {\n      this.setState({\n        mnemonicVerificationErrorMessage: error.toString(),\n      });\n    }\n  }\n\n  private copyMnemonic(): void {\n    const mnemonic = this.state.words.join(\" \");\n    copy(mnemonic);\n  }\n\n  private async clearMnemonic(): Promise<void> {\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords([]);\n  }\n\n  private async generateNewRandomMnemonic(): Promise<void> {\n    const randomWords = Bip39.encode(await Random.getBytes(16))\n      .toString()\n      .split(\" \");\n\n    (this.refs.MnemonicInput1 as MnemonicInput).setWords(randomWords);\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport Header from \"./Header\";\nimport Jumbo from \"./Jumbo\";\n\ninterface StartProps {}\n\nclass Start extends React.Component<StartProps, {}> {\n  public render(): JSX.Element {\n    return (\n      <Container>\n        <Header />\n        <Jumbo />\n        <Row>\n          <Col>\n            <h3>Choose your network</h3>\n            <p>Your address will get a network identifier for one of the following networks.</p>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/testnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Testnet\n            </Link>\n            <p>All test networks like e.g. Lovenet</p>\n          </Col>\n          <Col className=\"\"></Col>\n          <Col className=\"col-4\">\n            <Link to=\"/mainnet\" className=\"btn btn-lg btn-block btn-primary\">\n              Mainnet\n            </Link>\n            <p>The IOV main network</p>\n          </Col>\n          <Col className=\"\"></Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default Start;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport Start from \"./Start\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/mainnet\" component={() => <App network=\"mainnet\" />} />\n      <Route exact path=\"/testnet\" component={() => <App network=\"testnet\" />} />\n      <Route component={() => <Start />} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}