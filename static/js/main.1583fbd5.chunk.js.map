{"version":3,"sources":["address.ts","MnemonicInput.tsx","App.tsx","index.tsx"],"names":["chainIdForAddress","network","makeAddress","_x","_x2","_makeAddress","apply","this","arguments","_callee","mnemonic","wallet","chainId","identity","regenerator_default","a","wrap","_context","prev","next","Ed25519HdWallet","fromMnemonic","toString","createIdentity","HdPaths","iov","sent","abrupt","bnsCodec","identityToAddress","stop","wordlist","Object","toConsumableArray","EnglishMnemonic","MnemonicInput","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","typeahead","state","words","_this2","react_default","createElement","lib","id","multiple","bsSize","ref","onChange","selected","setState","onWordsChanged","onInputChange","input","search","oldWords","newWords","trim","split","text","_updateSelected","concat","selectHintOnEnter","options","filterBy","option","normalized","toLowerCase","startsWith","React","Component","emptyState","generatedMnemonic","undefined","step","mnemonicVerificationErrorMessage","address","App","objectSpread","generateNewRandomMnemonic","count","otherLink","react_router_dom","to","Container_default","Jumbotron_default","className","Row_default","Col_default","hidden","Alert_default","variant","Button_default","onClick","goToConfirm","src_MnemonicInput","length","dismissible","role","type","data-dismiss","aria-label","aria-hidden","disabled","goToAddress","Heading","mnemonicAction","confirmed","join","Error","t3","Bip39","Random","getBytes","encode","ReactDOM","render","react_router","exact","path","component","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.1583fbd5.chunk.js","sourcesContent":["import { Address, ChainId } from \"@iov/bcp\";\nimport { bnsCodec } from \"@iov/bns\";\nimport { EnglishMnemonic } from \"@iov/crypto\";\nimport { Ed25519HdWallet, HdPaths } from \"@iov/keycontrol\";\n\nexport type Network = \"mainnet\" | \"testnet\";\n\nfunction chainIdForAddress(network: \"mainnet\" | \"testnet\"): ChainId {\n  if (network === \"mainnet\") return \"iov-mainnet\" as ChainId;\n  else return \"iov-lovenet\" as ChainId; // any testnet chain ID is fine. We just need it for the address prefix\n}\n\nexport async function makeAddress(mnemonic: EnglishMnemonic, network: Network): Promise<Address> {\n  const wallet = Ed25519HdWallet.fromMnemonic(mnemonic.toString());\n  const chainId = chainIdForAddress(network);\n  const identity = await wallet.createIdentity(chainId, HdPaths.iov(0));\n  return bnsCodec.identityToAddress(identity);\n}\n","import { EnglishMnemonic } from \"@iov/crypto\";\nimport React from \"react\";\nimport { Typeahead, TypeaheadModel } from \"react-bootstrap-typeahead\";\n\nconst wordlist = [...EnglishMnemonic.wordlist]; // create copy of correct type\n\ninterface MnemonicInputProps {\n  readonly id: string;\n  readonly onWordsChanged?: (words: readonly string[]) => void;\n}\n\ninterface MnemonicInputState {\n  readonly words: readonly string[];\n}\n\ninterface PrivateTypeahead<T extends TypeaheadModel> extends Typeahead<T> {\n  readonly _updateSelected: (selected: T[]) => void;\n}\n\nclass MnemonicInput extends React.Component<MnemonicInputProps, MnemonicInputState> {\n  private typeahead: PrivateTypeahead<string> | null = null;\n\n  public constructor(props: MnemonicInputProps) {\n    super(props);\n    this.state = {\n      words: [],\n    };\n  }\n\n  public render(): JSX.Element {\n    return (\n      <div>\n        <Typeahead\n          id={this.props.id}\n          multiple={true}\n          bsSize=\"lg\"\n          ref={ref => (this.typeahead = ref as PrivateTypeahead<string>)}\n          onChange={selected => {\n            this.setState({ words: selected });\n            this.props.onWordsChanged && this.props.onWordsChanged(selected);\n          }}\n          onInputChange={input => {\n            if (!this.typeahead) return;\n\n            // Process input if some whitespace included\n            if (input.search(/\\s+/) !== -1) {\n              const oldWords = this.state.words;\n              const newWords = input.trim().split(/\\s+/);\n\n              this.typeahead.setState({ text: \"\" });\n              this.typeahead._updateSelected([...oldWords, ...newWords]);\n            }\n          }}\n          selectHintOnEnter={true}\n          options={wordlist}\n          filterBy={(option, props) => {\n            const normalized = props.text.trim().toLowerCase();\n            return option.startsWith(normalized);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default MnemonicInput;\n","import { Bip39, EnglishMnemonic, Random } from \"@iov/crypto\";\nimport React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Row from \"react-bootstrap/Row\";\nimport { Link } from \"react-router-dom\";\n\nimport { makeAddress } from \"./address\";\nimport MnemonicInput from \"./MnemonicInput\";\n\ninterface AppProps {\n  readonly network: \"mainnet\" | \"testnet\";\n}\n\ninterface AppState {\n  readonly generatedMnemonic: string | undefined;\n  readonly step: \"read\" | \"confirm\" | \"address\";\n  readonly words: readonly string[];\n  readonly mnemonicVerificationErrorMessage: string | undefined;\n  readonly address: string | undefined;\n}\n\nfunction wordCountOk(count: number): boolean {\n  return count === 12 || count === 15 || count === 18 || count === 21 || count === 24;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst emptyState: AppState = {\n  generatedMnemonic: undefined,\n  step: \"read\",\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: undefined,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst confirmedState: AppState = {\n  generatedMnemonic: \"adjust fan defense project father wisdom early slender vicious song picnic detail\",\n  step: \"address\",\n  words: [],\n  mnemonicVerificationErrorMessage: undefined,\n  address: \"tiov12q9ngy4wl8tnl0px65e8f4zpcgspgcn05ncywj\",\n};\n\nclass App extends React.Component<AppProps, AppState> {\n  public constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      ...emptyState,\n    };\n  }\n\n  public componentDidMount(): void {\n    if (!this.state.generatedMnemonic) {\n      this.generateNewRandomMnemonic();\n    }\n  }\n\n  public render(): JSX.Element {\n    const otherLink =\n      this.props.network === \"mainnet\" ? (\n        <Link to=\"/testnet\">Testnet</Link>\n      ) : (\n        <Link to=\"/mainnet\">Mainnet</Link>\n      );\n\n    return (\n      <Container>\n        <Jumbotron>\n          <Container>\n            <h2>\n              <span className=\"display-2 d-inline-block mr-2\">IOV Address Generator</span>\n              <small className=\"badge badge-primary align-top\">{this.props.network}</small>\n            </h2>\n            <p className=\"mb-0\">\n              Here you can generate an IOV address for {this.props.network}. Switch to the address generator\n              for {otherLink} instead.\n            </p>\n          </Container>\n        </Jumbotron>\n        <Row>\n          <Col></Col>\n        </Row>\n        <Row hidden={this.state.step !== \"read\"}>\n          <Col>\n            <h3>Your mnemonic:</h3>\n            <p>\n              The mnemonic represents your private key. When you lose that key, you cannot access that account\n              anymore and all assets are lost. It is in your own interest to store this in a safe and secure\n              location now. We will not show it again and it cannot be recovered.\n            </p>\n            <Alert variant=\"info\">\n              <p className=\"lead\">{this.state.generatedMnemonic}</p>\n              <div className=\"d-flex justify-content-start\">\n                <Button\n                  onClick={() => this.generateNewRandomMnemonic()}\n                  className=\"btn-sm\"\n                  variant=\"outline-secondary\"\n                >\n                  Generate a different one\n                </Button>\n              </div>\n            </Alert>\n\n            <div className=\"d-flex justify-content-end\">\n              <Button\n                className=\"ml-2\"\n                onClick={() => this.goToConfirm(\"discard\")}\n                variant=\"outline-secondary\"\n              >\n                Skip (use externally generated mnemonic instead)\n              </Button>\n              <Button className=\"ml-2\" onClick={() => this.goToConfirm(\"use\")} variant=\"outline-primary\">\n                Use this mnemonic\n              </Button>\n            </div>\n          </Col>\n        </Row>\n        <Row hidden={this.state.step !== \"confirm\"}>\n          <Col>\n            <h3>Type-in your mnemonic:</h3>\n            <p>Let's make sure you can access your mnemonic when you need it.</p>\n            <div>\n              <MnemonicInput id=\"input1\" onWordsChanged={words => this.setState({ words: words })} />\n              <p>\n                <small>{this.state.words.length} words entered.</small>\n              </p>\n\n              <Alert\n                variant=\"danger\"\n                dismissible={true}\n                role=\"alert\"\n                hidden={!this.state.mnemonicVerificationErrorMessage}\n              >\n                {this.state.mnemonicVerificationErrorMessage}\n                <button\n                  type=\"button\"\n                  className=\"close\"\n                  data-dismiss=\"alert\"\n                  aria-label=\"Close\"\n                  onClick={() => this.setState({ mnemonicVerificationErrorMessage: undefined })}\n                >\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </Alert>\n            </div>\n            <div className=\"d-flex justify-content-end\">\n              <Button disabled={!wordCountOk(this.state.words.length)} onClick={() => this.goToAddress()}>\n                Generate {this.props.network} address\n              </Button>\n            </div>\n          </Col>\n        </Row>\n        <Row hidden={this.state.step !== \"address\"}>\n          <Col>\n            <Alert variant=\"success\">\n              <Alert.Heading>Your IOV address:</Alert.Heading>\n              <p className=\"leap\">{this.state.address}</p>\n            </Alert>\n            <p>This browser tab contains sensitive information in memory. Please close it now.</p>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  private goToConfirm(mnemonicAction: \"discard\" | \"use\"): void {\n    if (mnemonicAction === \"discard\") {\n      this.setState({\n        generatedMnemonic: undefined,\n      });\n    }\n    this.setState({ step: \"confirm\" });\n  }\n\n  private async goToAddress(): Promise<void> {\n    try {\n      const confirmed = new EnglishMnemonic(this.state.words.join(\" \"));\n\n      if (this.state.generatedMnemonic) {\n        if (this.state.generatedMnemonic !== confirmed.toString()) {\n          throw new Error(\"The mnemonic you typed in does not match the generated mnemonic\");\n        }\n      }\n\n      this.setState({\n        step: \"address\",\n        address: await makeAddress(confirmed, this.props.network),\n      });\n    } catch (error) {\n      this.setState({\n        mnemonicVerificationErrorMessage: error.toString(),\n      });\n    }\n  }\n\n  private async generateNewRandomMnemonic(): Promise<void> {\n    const mnemonic = Bip39.encode(await Random.getBytes(16)).toString();\n    this.setState({ generatedMnemonic: mnemonic });\n  }\n}\n\nexport default App;\n","import \"bootstrap/dist/css/bootstrap.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Redirect, Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n      <Route exact path=\"/mainnet\" component={() => <App network=\"mainnet\" />} />\n      <Route exact path=\"/testnet\" component={() => <App network=\"testnet\" />} />\n      <Route component={() => <Redirect to=\"/mainnet\" />} />\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}